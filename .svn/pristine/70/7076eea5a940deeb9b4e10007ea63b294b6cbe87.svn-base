<template>
    <div class="test">
        <div class="container" id="container"></div>
    </div>
</template>
<script>
import * as THREE from "@/assets/js/three.module";
import { OrbitControls } from "@/assets/jsm/controls/OrbitControls";
import { TWEEN } from "@/assets/jsm/libs/tween.module.min";
import { ParametricGeometries } from "@/assets/jsm/geometries/ParametricGeometries";
import { FBXLoader } from "@/assets/jsm/loaders/FBXLoader";

export default {
    data() {
        return {
            container: null,
            renderer: null,
            camera: null,
            scene: null,
            light: null,
            controls: null,
            raycaster: null,
            mouse: null,
            particleSystem: null
        };
    },
    beforeDestroy() {
        this.scene.children.forEach((data, index) => {
            // console.log(data);
            if (data.type == "Group") {
                data.traverse(function(obj) {
                    if (obj.type === "Mesh") {
                        obj.geometry.dispose();
                        if (obj.material.length) {
                            obj.material.forEach(obj2 => {
                                obj2.dispose();
                            });
                        } else {
                            obj.material.dispose();
                        }
                    }
                });
                this.scene.remove(data);
            } else {
                this.scene.remove(data);
            }
        });
        this.initThree = null;
        this.initCamera = null;
        this.initScene = null;
        this.initLight = null;
        this.initGeometry = null;
        this.animate = null;
        this.initControls = null;
        this.initRaycaster = null;
        this.initOutline = null;
        this.addLine = null;
        this.setSprite = null;
        this.setLabel = null;

        //变量
        this.container = null;
        this.camera = null;
        this.scene = null;
        this.renderer = null;
        this.mesh = null;
        this.light = null;
        this.clock = null;
        this.controls = null;
        this.mesh1 = null;
        this.mixer1 = null;
        this.raycaster = null;
        this.mouse = null;

        window.removeEventListener("click", this.onclikc);
        window.removeEventListener("resize", this.onWindowResize);
    },
    mounted() {
        if (document.getElementById("container")) {
            this.initRenderer();
            this.initCamera();
            this.initScene();
            this.initLight();
            this.initControls();
            this.initRaycaster();
            this.animate();
            this.initGeometry();

            let helper = new THREE.AxesHelper(10);
            this.scene.add(helper);

            window.addEventListener("resize", this.onWindowResize, false);
            window.addEventListener("click", this.onclikc, false);
        }
    },
    methods: {
        initRenderer() {
            this.container = document.getElementById("container");
            //渲染器
            this.renderer = new THREE.WebGLRenderer({
                antialias: true,
                alpha: false
            }); //alpha设置为true 背景为透明

            this.renderer.setSize(
                this.container.clientWidth,
                this.container.clientHeight
            );
            // this.renderer.shadowMap.enabled = true;
            this.container.appendChild(this.renderer.domElement);
        },
        initCamera() {
            //相机
            this.camera = new THREE.PerspectiveCamera(
                75,
                this.container.clientWidth / this.container.clientHeight,
                1,
                1000000
            );
            this.camera.position.x = 0;
            this.camera.position.y = 0;
            this.camera.position.z = 20000;

            this.camera.up.x = 0;
            this.camera.up.y = 1;
            this.camera.up.z = 0;

            this.camera.lookAt(0, 0, 0);
        },
        initScene() {
            //场景
            this.scene = new THREE.Scene();
        },
        initLight() {
            //光源
            this.scene.add(new THREE.AmbientLight(0xffffff)); // 创建环境光源，不产生阴影
            this.light = new THREE.DirectionalLight(0xffffff); // 创建点光源，可以产生阴影
            this.light.position.set(0, 110, 110);
            this.light.shadow.camera.top = 100;
            this.light.shadow.camera.bottom = -100;
            this.light.shadow.camera.left = -100;
            this.light.shadow.camera.right = 100;
            //告诉平行光需要开启阴影投射
            this.light.castShadow = true;
            this.scene.add(this.light);
        },
        initControls() {
            //相机旋转插件
            this.controls = new OrbitControls(
                this.camera,
                this.renderer.domElement
            );
            // 页面转动效果
            // controls.enabled = false;
            // 使动画循环使用时阻尼或自转 意思是否有惯性
            this.controls.enableDamping = false;
            //动态阻尼系数 就是鼠标拖拽旋转灵敏度
            this.controls.dampingFactor = 1;
            //是否可以缩放
            this.controls.enableZoom = true;
            //是否自动旋转
            this.controls.autoRotate = false;
            //设置相机距离原点的最远距离
            this.controls.minDistance = 1;
            //设置相机距离原点的最远距离
            this.controls.maxDistance = 200000;
            //是否开启右键拖拽
            this.controls.enablePan = true;
            //最大仰视角和俯视角
            this.controls.minPolarAngle = 0; // radians
            this.controls.maxPolarAngle = Math.PI;
            //是否自动旋转，自动旋转速度。默认每秒30圈
            this.controls.autoRotate = false;
            this.controls.autoRotateSpeed = 0.2; // 30 seconds per round when fps is 60
            //是否能使用键盘
            this.controls.enableKeys = false;

            // this.controls.target = new THREE.Vector3(17435, 2280, 13680); //修改相机原点
        },
        initRaycaster() {
            //射线，用以判断点击那个模型(拾取)
            this.raycaster = new THREE.Raycaster();
            this.mouse = new THREE.Vector2();
        },
        onWindowResize() {
            // 窗口自动适应
            this.camera.aspect = window.innerWidth / window.innerHeight;
            this.camera.updateProjectionMatrix();
            this.renderer.setSize(window.innerWidth, window.innerHeight);
        },
        animate() {
            if (this.renderer) {
                this.controls.update();
                this.renderer.render(this.scene, this.camera);
                TWEEN.update();
                requestAnimationFrame(this.animate);
            }
        },
        onclikc() {
            //通过鼠标点击的位置计算出raycaster所需要的点的位置，以屏幕中心为原点，值的范围为-1到1.
            let event = window.event;
            this.mouse.x = (event.clientX / window.innerWidth) * 2 - 1;
            this.mouse.y = -(event.clientY / window.innerHeight) * 2 + 1;
            // 通过鼠标点的位置和当前相机的矩阵计算出raycaster
            this.raycaster.setFromCamera(this.mouse, this.camera);
            var intersects = this.raycaster.intersectObjects(
                this.scene.children,
                true
            );
            if (intersects.length) {
                console.log(intersects[0]);
                this.tween1();
            }
        },
        initGeometry() {
            let arr = ["obj/UV4/A3/A3.FBX"];
            let loader = new FBXLoader();
            loader.load(process.env.BASE_URL + arr[0], object => {
                let mesh = object;
                // mesh.position.set(0, 0, 0);

                if (!mesh.geometry) {
                    mesh.children.forEach(item => {
                        item.geometry.computeBoundingBox();
                        // let max = item.geometry.boundingBox.max;
                        // let min = item.geometry.boundingBox.min;
                        // console.log(max);
                        // console.log(min);

                        var centroid = new THREE.Vector3();
                        centroid.addVectors(
                            item.geometry.boundingBox.min,
                            item.geometry.boundingBox.max
                        );
                        centroid.multiplyScalar(0.5);
                        centroid.applyMatrix4(item.matrixWorld);

                        console.log(centroid);
                        item.geometry.translate(0, 0, 0);
                        item.geometry.center();
                    });
                } else {
                    mesh.geometry.computeBoundingBox();
                    mesh.geometry.center();
                }
                this.scene.add(mesh);
            });

            // Model.geometry.computeBoundingBox();
            // var centroid = new THREE.Vector3();
            // centroid.addVectors(
            //     Model.geometry.boundingBox.min,
            //     Model.geometry.boundingBox.max
            // );
            // centroid.multiplyScalar(0.5);
            // centroid.applyMatrix4(Model.matrixWorld);
            // return centroid;
        },
        tween1() {
            /* 创建补间动画 */
            let pos = { val: 1 };

            let tween = new TWEEN.Tween(pos).to({ val: 0 }, 5000);
            tween
                .easing(TWEEN.Easing.Quadratic.InOut)
                .delay(1000)
                .onUpdate(callback);

            // let tweenBack = new TWEEN.Tween(pos).to({ val: 1 }, 5000);
            // tweenBack
            //     .easing(TWEEN.Easing.Quadratic.InOut)
            //     .delay(1000)
            //     .onUpdate(callback);

            // tween.chain(tweenBack);
            // tweenBack.chain(tween);
            tween.start();

            /* 粒子位移的回调函数 */
            function callback() {
                let val = this.val;
                console.log(this.val);
                // let particles = particleSystem.children;

                // for (let i = 0; i < particles.length; i++) {
                //     let particle = particles[i];
                //     particle.position.set(
                //         arr[i].x * val,
                //         arr[i].y * val,
                //         arr[i].z * val
                //     );
                //     // let pos = particle.position;
                //     // let material = particle.material;

                //     // pos.x = position[i].x * val;
                //     // pos.y = position[i].y * val;
                //     // pos.z = position[i].z * val;

                //     // material.color.r = pos.z / 10;
                //     // material.color.g = pos.y / 10;
                //     // material.color.b = pos.z / 10;
                // }
            }
        }
    }
};
</script>
<style lang="less">
.test {
    width: 100%;
    height: 100%;
    overflow: hidden;
    .container {
        width: 100%;
        height: 100%;
    }
}
</style>
