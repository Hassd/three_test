{"remainingRequest":"E:\\自己的项目\\three_test\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\自己的项目\\three_test\\src\\views\\test\\test4 copy.vue?vue&type=style&index=0&lang=less&","dependencies":[{"path":"E:\\自己的项目\\three_test\\src\\views\\test\\test4 copy.vue","mtime":1581260728175},{"path":"E:\\自己的项目\\three_test\\node_modules\\css-loader\\index.js","mtime":499162500000},{"path":"E:\\自己的项目\\three_test\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"E:\\自己的项目\\three_test\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"E:\\自己的项目\\three_test\\node_modules\\less-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\自己的项目\\three_test\\node_modules\\@vue\\cli-plugin-babel\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\自己的项目\\three_test\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCg0KLnRlc3Qgew0KICAgIHdpZHRoOiAxMDAlOw0KICAgIGhlaWdodDogMTAwJTsNCiAgICBvdmVyZmxvdzogaGlkZGVuOw0KICAgIC5jb250YWluZXIgew0KICAgICAgICB3aWR0aDogMTAwJTsNCiAgICAgICAgaGVpZ2h0OiAxMDAlOw0KICAgIH0NCn0NCg=="},{"version":3,"sources":["test4 copy.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6HA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"test4 copy.vue","sourceRoot":"src/views/test","sourcesContent":["<template>\r\n    <div class=\"test\">\r\n        <div class=\"container\" id=\"container\"></div>\r\n        <!-- <canvas id=\"canvas\"></canvas> -->\r\n    </div>\r\n</template>\r\n<script>\r\nimport * as THREE from \"@/assets/build/three.module\";\r\nimport { TWEEN } from \"@/assets/examples/jsm/libs/tween.module.min\";\r\n\r\nimport { GUI } from \"@/assets/examples/jsm/libs/dat.gui.module.js\";\r\n\r\nimport { EffectComposer } from \"@/assets/examples/jsm/postprocessing/EffectComposer.js\";\r\nimport { RenderPass } from \"@/assets/examples/jsm/postprocessing/RenderPass.js\";\r\nimport { UnrealBloomPass } from \"@/assets/examples/jsm/postprocessing/UnrealBloomPass.js\";\r\n\r\nimport mythree from \"@/service/three\";\r\n\r\nexport default {\r\n    data() {\r\n        return {\r\n            container: null,\r\n            renderer: null,\r\n            camera: null,\r\n            scene: null,\r\n            light: null,\r\n            controls: null,\r\n            composer: null,\r\n            raycaster: null,\r\n            mouse: null\r\n        };\r\n    },\r\n    mounted() {\r\n        let three = new mythree({\r\n            id: \"container\",\r\n            showHelper: true,\r\n            showStats: true\r\n        });\r\n\r\n        let obj = three.init();\r\n\r\n        this.container = obj.container;\r\n        this.renderer = obj.renderer; //渲染器\r\n        this.camera = obj.camera; //相机\r\n        this.scene = obj.scene; //场景\r\n        this.light = obj.light; //光源\r\n        this.controls = obj.controls; //相机旋转插件\r\n        this.composer = obj.composer; //后期处理\r\n\r\n        this.initRaycaster();\r\n        this.initGeometry();\r\n        window.addEventListener(\"click\", this.onclikc, false);\r\n    },\r\n    methods: {\r\n        initRaycaster() {\r\n            //射线，用以判断点击那个模型(拾取)\r\n            this.raycaster = new THREE.Raycaster();\r\n            this.mouse = new THREE.Vector2();\r\n        },\r\n        onclikc() {\r\n            //通过鼠标点击的位置计算出raycaster所需要的点的位置，以屏幕中心为原点，值的范围为-1到1.\r\n            let event = window.event;\r\n            this.mouse.x = (event.clientX / window.innerWidth) * 2 - 1;\r\n            this.mouse.y = -(event.clientY / window.innerHeight) * 2 + 1;\r\n            // 通过鼠标点的位置和当前相机的矩阵计算出raycaster\r\n            this.raycaster.setFromCamera(this.mouse, this.camera);\r\n            var intersects = this.raycaster.intersectObjects(\r\n                this.scene.children,\r\n                true\r\n            );\r\n            if (intersects.length) {\r\n                console.log(intersects);\r\n            }\r\n        },\r\n        initGeometry() {\r\n            var geometry = new THREE.SphereBufferGeometry(5, 32, 32);\r\n            var material = new THREE.MeshBasicMaterial({ color: 0xffff00 });\r\n            var sphere = new THREE.Mesh(geometry, material);\r\n            this.scene.add(sphere);\r\n\r\n            let params = {\r\n                exposure: 1,\r\n                bloomStrength: 1.5,\r\n                bloomThreshold: 0,\r\n                bloomRadius: 0\r\n            };\r\n            var renderScene = new RenderPass(this.scene, this.camera);\r\n\r\n            var bloomPass = new UnrealBloomPass(\r\n                new THREE.Vector2(window.innerWidth, window.innerHeight),\r\n                1.5,\r\n                0.4,\r\n                0.85\r\n            );\r\n            bloomPass.threshold = params.bloomThreshold;\r\n            bloomPass.strength = params.bloomStrength;\r\n            bloomPass.radius = params.bloomRadius;\r\n\r\n            this.composer.addPass(renderScene);\r\n            this.composer.addPass(bloomPass);\r\n\r\n            var gui = new GUI();\r\n\r\n            gui.add(params, \"exposure\", 0.1, 2).onChange(value => {\r\n                this.renderer.toneMappingExposure = Math.pow(value, 4.0);\r\n            });\r\n\r\n            gui.add(params, \"bloomThreshold\", 0.0, 1.0).onChange(value => {\r\n                bloomPass.threshold = Number(value);\r\n            });\r\n\r\n            gui.add(params, \"bloomStrength\", 0.0, 3.0).onChange(value => {\r\n                bloomPass.strength = Number(value);\r\n            });\r\n\r\n            gui.add(params, \"bloomRadius\", 0.0, 1.0)\r\n                .step(0.01)\r\n                .onChange(value => {\r\n                    bloomPass.radius = Number(value);\r\n                });\r\n        }\r\n    }\r\n};\r\n</script>\r\n<style lang=\"less\">\r\n.test {\r\n    width: 100%;\r\n    height: 100%;\r\n    overflow: hidden;\r\n    .container {\r\n        width: 100%;\r\n        height: 100%;\r\n    }\r\n}\r\n</style>\r\n"]}]}