{"remainingRequest":"E:\\自己的项目\\three_test\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\自己的项目\\three_test\\src\\views\\Points\\test5.vue?vue&type=style&index=0&lang=less&","dependencies":[{"path":"E:\\自己的项目\\three_test\\src\\views\\Points\\test5.vue","mtime":1581263829922},{"path":"E:\\自己的项目\\three_test\\node_modules\\css-loader\\index.js","mtime":499162500000},{"path":"E:\\自己的项目\\three_test\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"E:\\自己的项目\\three_test\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"E:\\自己的项目\\three_test\\node_modules\\less-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\自己的项目\\three_test\\node_modules\\@vue\\cli-plugin-babel\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\自己的项目\\three_test\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKDQoudGVzdCB7DQogICAgd2lkdGg6IDEwMCU7DQogICAgaGVpZ2h0OiAxMDAlOw0KICAgIG92ZXJmbG93OiBoaWRkZW47DQogICAgLmNvbnRhaW5lciB7DQogICAgICAgIHdpZHRoOiAxMDAlOw0KICAgICAgICBoZWlnaHQ6IDEwMCU7DQogICAgfQ0KfQ0K"},{"version":3,"sources":["test5.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"test5.vue","sourceRoot":"src/views/Points","sourcesContent":["<template>\r\n    <div class=\"test\">\r\n        <div class=\"container\" id=\"container\"></div>\r\n        <!-- <canvas id=\"canvas\"></canvas> -->\r\n    </div>\r\n</template>\r\n<script>\r\nimport * as THREE from \"@/assets/build/three.module\";\r\nimport { TWEEN } from \"@/assets/examples/jsm/libs/tween.module.min\";\r\n\r\nimport { GUI } from \"@/assets/examples/jsm/libs/dat.gui.module.js\";\r\n\r\nimport { EffectComposer } from \"@/assets/examples/jsm/postprocessing/EffectComposer.js\";\r\nimport { RenderPass } from \"@/assets/examples/jsm/postprocessing/RenderPass.js\";\r\nimport { UnrealBloomPass } from \"@/assets/examples/jsm/postprocessing/UnrealBloomPass.js\";\r\n\r\nimport { FBXLoader } from \"@/assets/examples/jsm/loaders/FBXLoader\";\r\n\r\nimport mythree from \"@/service/three\";\r\n\r\nexport default {\r\n    data() {\r\n        return {\r\n            container: null,\r\n            renderer: null,\r\n            camera: null,\r\n            scene: null,\r\n            light: null,\r\n            controls: null,\r\n            composer: null,\r\n            raycaster: null,\r\n            mouse: null,\r\n\r\n            stats: null,\r\n\r\n            geometry: null,\r\n\r\n            geometryArr: [],\r\n            count: 0\r\n        };\r\n    },\r\n    beforeDestroy() {\r\n        if (!document.getElementById(\"container\")) {\r\n            return;\r\n        }\r\n        this.scene.children.forEach((data, index) => {\r\n            // console.log(data);\r\n            if (data.type == \"Group\") {\r\n                data.traverse(function(obj) {\r\n                    if (obj.type === \"Mesh\") {\r\n                        obj.geometry.dispose();\r\n                        if (obj.material.length) {\r\n                            obj.material.forEach(obj2 => {\r\n                                obj2.dispose();\r\n                            });\r\n                        } else {\r\n                            obj.material.dispose();\r\n                        }\r\n                    }\r\n                });\r\n                this.scene.remove(data);\r\n            } else {\r\n                this.scene.remove(data);\r\n            }\r\n        });\r\n        this.initThree = null;\r\n        this.initCamera = null;\r\n        this.initScene = null;\r\n        this.initLight = null;\r\n        this.initGeometry = null;\r\n        this.animate = null;\r\n        this.initControls = null;\r\n        this.initRaycaster = null;\r\n        this.initOutline = null;\r\n        this.addLine = null;\r\n        this.setSprite = null;\r\n        this.setLabel = null;\r\n\r\n        //变量\r\n        this.container = null;\r\n        this.camera = null;\r\n        this.scene = null;\r\n        this.renderer = null;\r\n        this.mesh = null;\r\n        this.light = null;\r\n        this.clock = null;\r\n        this.controls = null;\r\n        this.mesh1 = null;\r\n        this.mixer1 = null;\r\n        this.raycaster = null;\r\n        this.mouse = null;\r\n\r\n        window.removeEventListener(\"click\", this.onclikc);\r\n    },\r\n    mounted() {\r\n        let three = new mythree({\r\n            id: \"container\",\r\n            showHelper: true,\r\n            showStats: true\r\n        });\r\n\r\n        let obj = three.init();\r\n\r\n        this.container = obj.container;\r\n        this.renderer = obj.renderer; //渲染器\r\n        this.camera = obj.camera; //相机\r\n        this.camera.position.z = 2000;\r\n        this.scene = obj.scene; //场景\r\n        this.light = obj.light; //光源\r\n        this.controls = obj.controls; //相机旋转插件\r\n        this.composer = obj.composer; //后期处理\r\n        this.stats = obj.stats; //后期处理\r\n\r\n        this.initRaycaster();\r\n        this.initGeometry();\r\n        three.animate(() => {\r\n            if (this.geometry) {\r\n                this.geometry.verticesNeedUpdate = true;\r\n            }\r\n        });\r\n        window.addEventListener(\"click\", this.onclikc, false);\r\n    },\r\n    methods: {\r\n        initRaycaster() {\r\n            //射线，用以判断点击那个模型(拾取)\r\n            this.raycaster = new THREE.Raycaster();\r\n            this.mouse = new THREE.Vector2();\r\n        },\r\n        onclikc() {\r\n            //通过鼠标点击的位置计算出raycaster所需要的点的位置，以屏幕中心为原点，值的范围为-1到1.\r\n            let event = window.event;\r\n            this.mouse.x = (event.clientX / window.innerWidth) * 2 - 1;\r\n            this.mouse.y = -(event.clientY / window.innerHeight) * 2 + 1;\r\n            // 通过鼠标点的位置和当前相机的矩阵计算出raycaster\r\n            this.raycaster.setFromCamera(this.mouse, this.camera);\r\n            var intersects = this.raycaster.intersectObjects(\r\n                this.scene.children,\r\n                true\r\n            );\r\n            if (intersects.length) {\r\n                console.log(intersects);\r\n            }\r\n        },\r\n        initEffect() {\r\n            //这里的通道和模型没有关系或者说和所有都有关系\r\n\r\n            let params = {\r\n                exposure: 1,\r\n                bloomStrength: 1.5,\r\n                bloomThreshold: 0,\r\n                bloomRadius: 0\r\n            };\r\n            var renderScene = new RenderPass(this.scene, this.camera);\r\n\r\n            var bloomPass = new UnrealBloomPass(\r\n                new THREE.Vector2(window.innerWidth, window.innerHeight),\r\n                1.5,\r\n                0.4,\r\n                0.85\r\n            );\r\n            bloomPass.threshold = params.bloomThreshold;\r\n            bloomPass.strength = params.bloomStrength;\r\n            bloomPass.radius = params.bloomRadius;\r\n\r\n            this.composer.addPass(renderScene);\r\n            this.composer.addPass(bloomPass);\r\n\r\n            var gui = new GUI();\r\n\r\n            gui.add(params, \"exposure\", 0.1, 2).onChange(value => {\r\n                this.renderer.toneMappingExposure = Math.pow(value, 4.0);\r\n            });\r\n\r\n            gui.add(params, \"bloomThreshold\", 0.0, 1.0).onChange(value => {\r\n                bloomPass.threshold = Number(value);\r\n            });\r\n\r\n            gui.add(params, \"bloomStrength\", 0.0, 3.0).onChange(value => {\r\n                bloomPass.strength = Number(value);\r\n            });\r\n\r\n            gui.add(params, \"bloomRadius\", 0.0, 1.0)\r\n                .step(0.01)\r\n                .onChange(value => {\r\n                    bloomPass.radius = Number(value);\r\n                });\r\n        },\r\n        initGeometry() {\r\n            this.loaderModel(() => {\r\n                this.geometry = new THREE.Geometry();\r\n\r\n                for (let i = 0; i < this.count; i++) {\r\n                    this.geometry.vertices.push(\r\n                        new THREE.Vector3(\r\n                            1000 * Math.random(),\r\n                            1000 * Math.random(),\r\n                            1000 * Math.random()\r\n                        )\r\n                    );\r\n                }\r\n                this.geometry.center();\r\n\r\n                let texture = new THREE.Texture(this.getCanvas());\r\n                texture.needsUpdate = true;\r\n                let material = new THREE.PointsMaterial({\r\n                    color: 0xffffff,\r\n                    size: 1,\r\n                    map: texture,\r\n                    blending: THREE.AdditiveBlending,\r\n                    depthTest: true,\r\n                    transparent: true\r\n                });\r\n\r\n                let particles = new THREE.Points(this.geometry, material); //加入粒子系统中\r\n                this.scene.add(particles);\r\n                let index = 0;\r\n                this.initEffect();\r\n                setInterval(() => {\r\n                    this.implementTween(index);\r\n                    if (index < 3) {\r\n                        index++;\r\n                    } else {\r\n                        index = 0;\r\n                    }\r\n                }, 5000);\r\n            });\r\n        },\r\n\r\n        loaderModel(fun = () => {}) {\r\n            //加载模型并获取他的顶点数据\r\n            let num = 0;\r\n            let modelPath = [\r\n                \"1_1.FBX\",\r\n                \"2_1.FBX\",\r\n                \"3_1.FBX\",\r\n                \"4_1.FBX\",\r\n                \"5_1.FBX\",\r\n                \"6_1.FBX\"\r\n            ];\r\n\r\n            for (let i = 0; i < modelPath.length; i++) {\r\n                let loader1 = new FBXLoader();\r\n                loader1.load(\r\n                    process.env.BASE_URL + \"models/\" + modelPath[i],\r\n                    mesh => {\r\n                        mesh.children[0].geometry.center();\r\n                        mesh.children[0].geometry.scale(50, 50, 50);\r\n                        // this.scene.add(mesh);\r\n                        let geometry = mesh.children[0].geometry;\r\n                        this.TranGeometry(geometry);\r\n                        num++;\r\n                        if (num >= modelPath.length) {\r\n                            fun();\r\n                        }\r\n                    }\r\n                );\r\n            }\r\n        },\r\n\r\n        TranGeometry(BufferGeometry) {\r\n            //把 \"BufferGeometry\" 转换成 \"Geometry\"\r\n            let geometry = new THREE.Geometry();\r\n            geometry.fromBufferGeometry(BufferGeometry);\r\n            this.count =\r\n                this.count < geometry.vertices.length\r\n                    ? geometry.vertices.length\r\n                    : this.count;\r\n\r\n            this.geometryArr.push(geometry);\r\n        },\r\n\r\n        implementTween(index) {\r\n            this.geometry.vertices.forEach((e, i, arr) => {\r\n                let length = this.geometryArr[index].vertices.length;\r\n                let o = this.geometryArr[index].vertices[i % length];\r\n                new TWEEN.Tween(e)\r\n                    .to(\r\n                        {\r\n                            x: o.x,\r\n                            y: o.y,\r\n                            z: o.z\r\n                        },\r\n                        1000\r\n                    )\r\n                    .easing(TWEEN.Easing.Exponential.In)\r\n                    .delay(1000 * Math.random())\r\n                    .start();\r\n            });\r\n        },\r\n\r\n        getCanvas() {\r\n            //粒子贴图\r\n            let canvas = document.createElement(\"canvas\");\r\n            // 开始绘制路径\r\n            canvas.width = 64;\r\n            canvas.height = 64;\r\n            let ctx = canvas.getContext(\"2d\");\r\n            ctx.beginPath();\r\n\r\n            ctx.arc(canvas.width / 2, canvas.height / 2, 32, 0, Math.PI * 2);\r\n\r\n            let gradient = ctx.createRadialGradient(\r\n                canvas.width / 2,\r\n                canvas.height / 2,\r\n                0,\r\n                canvas.width / 2,\r\n                canvas.height / 2,\r\n                canvas.width / 2\r\n            );\r\n            gradient.addColorStop(0, \"rgba(255,255,255,1)\");\r\n            gradient.addColorStop(0.1, \"rgba(255,255,255,1)\");\r\n            gradient.addColorStop(0.4, \"rgba(255,255,255,9)\");\r\n            gradient.addColorStop(1, \"rgba(0,0,0,0.5)\");\r\n\r\n            ctx.fillStyle = gradient;\r\n            ctx.fill();\r\n            // 绘制圆的路径**\r\n\r\n            // 0°是从三点钟方向开始的\r\n            // 描边路径\r\n            ctx.stroke();\r\n\r\n            return canvas;\r\n        }\r\n    }\r\n};\r\n</script>\r\n<style lang=\"less\">\r\n.test {\r\n    width: 100%;\r\n    height: 100%;\r\n    overflow: hidden;\r\n    .container {\r\n        width: 100%;\r\n        height: 100%;\r\n    }\r\n}\r\n</style>\r\n"]}]}