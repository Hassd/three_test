{"remainingRequest":"E:\\自己的项目\\three_test\\node_modules\\babel-loader\\lib\\index.js!E:\\自己的项目\\three_test\\src\\assets\\jsm\\loaders\\STLLoader.js","dependencies":[{"path":"E:\\自己的项目\\three_test\\src\\assets\\jsm\\loaders\\STLLoader.js","mtime":1581177211273},{"path":"E:\\自己的项目\\three_test\\node_modules\\@vue\\cli-plugin-babel\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\自己的项目\\three_test\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["E:/自己的项目/three_test/src/assets/jsm/loaders/STLLoader.js"],"names":["BufferAttribute","BufferGeometry","FileLoader","Float32BufferAttribute","Loader","LoaderUtils","Vector3","STLLoader","manager","call","prototype","Object","assign","create","constructor","load","url","onLoad","onProgress","onError","scope","loader","setPath","path","setResponseType","text","parse","exception","data","isBinary","expect","face_size","n_faces","reader","DataView","getUint32","byteLength","solid","off","matchDataViewAt","query","offset","i","il","length","getUint8","parseBinary","faces","r","g","b","hasColors","colors","defaultR","defaultG","defaultB","alpha","index","Float32Array","dataOffset","faceLength","geometry","vertices","normals","face","start","normalX","getFloat32","normalY","normalZ","packedColor","getUint16","vertexstart","componentIdx","setAttribute","parseASCII","patternSolid","patternFace","faceCounter","patternFloat","source","patternVertex","RegExp","patternNormal","normal","result","groupVertexes","groupCount","startVertex","endVertex","exec","vertexCountPerFace","normalCountPerFace","x","parseFloat","y","z","push","console","error","addGroup","ensureString","buffer","decodeText","Uint8Array","ensureBinary","array_buffer","charCodeAt","binData"],"mappings":"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","sourcesContent":["/**\n * @author aleeper / http://adamleeper.com/\n * @author mrdoob / http://mrdoob.com/\n * @author gero3 / https://github.com/gero3\n * @author Mugen87 / https://github.com/Mugen87\n * @author neverhood311 / https://github.com/neverhood311\n *\n * Description: A THREE loader for STL ASCII files, as created by Solidworks and other CAD programs.\n *\n * Supports both binary and ASCII encoded files, with automatic detection of type.\n *\n * The loader returns a non-indexed buffer geometry.\n *\n * Limitations:\n *  Binary decoding supports \"Magics\" color format (http://en.wikipedia.org/wiki/STL_(file_format)#Color_in_binary_STL).\n *  There is perhaps some question as to how valid it is to always assume little-endian-ness.\n *  ASCII decoding assumes file is UTF-8.\n *\n * Usage:\n *  var loader = new STLLoader();\n *  loader.load( './models/stl/slotted_disk.stl', function ( geometry ) {\n *    scene.add( new THREE.Mesh( geometry ) );\n *  });\n *\n * For binary STLs geometry might contain colors for vertices. To use it:\n *  // use the same code to load STL as above\n *  if (geometry.hasColors) {\n *    material = new THREE.MeshPhongMaterial({ opacity: geometry.alpha, vertexColors: THREE.VertexColors });\n *  } else { .... }\n *  var mesh = new THREE.Mesh( geometry, material );\n *\n * For ASCII STLs containing multiple solids, each solid is assigned to a different group.\n * Groups can be used to assign a different color by defining an array of materials with the same length of\n * geometry.groups and passing it to the Mesh constructor:\n *\n * var mesh = new THREE.Mesh( geometry, material );\n *\n * For example:\n *\n *  var materials = [];\n *  var nGeometryGroups = geometry.groups.length;\n *\n *  var colorMap = ...; // Some logic to index colors.\n *\n *  for (var i = 0; i < nGeometryGroups; i++) {\n *\n *\t\tvar material = new THREE.MeshPhongMaterial({\n *\t\t\tcolor: colorMap[i],\n *\t\t\twireframe: false\n *\t\t});\n *\n *  }\n *\n *  materials.push(material);\n *  var mesh = new THREE.Mesh(geometry, materials);\n */\n\nimport {\n    BufferAttribute,\n    BufferGeometry,\n    FileLoader,\n    Float32BufferAttribute,\n    Loader,\n    LoaderUtils,\n    Vector3\n} from \"../../js/three.module.js\";\n\n\nvar STLLoader = function (manager) {\n\n    Loader.call(this, manager);\n\n};\n\nSTLLoader.prototype = Object.assign(Object.create(Loader.prototype), {\n\n    constructor: STLLoader,\n\n    load: function (url, onLoad, onProgress, onError) {\n\n        var scope = this;\n\n        var loader = new FileLoader(scope.manager);\n        loader.setPath(scope.path);\n        loader.setResponseType('arraybuffer');\n        loader.load(url, function (text) {\n\n            try {\n\n                onLoad(scope.parse(text));\n\n            } catch (exception) {\n\n                if (onError) {\n\n                    onError(exception);\n\n                }\n\n            }\n\n        }, onProgress, onError);\n\n    },\n\n    parse: function (data) {\n\n        function isBinary(data) {\n\n            var expect, face_size, n_faces, reader;\n            reader = new DataView(data);\n            face_size = (32 / 8 * 3) + ((32 / 8 * 3) * 3) + (16 / 8);\n            n_faces = reader.getUint32(80, true);\n            expect = 80 + (32 / 8) + (n_faces * face_size);\n\n            if (expect === reader.byteLength) {\n\n                return true;\n\n            }\n\n            // An ASCII STL data must begin with 'solid ' as the first six bytes.\n            // However, ASCII STLs lacking the SPACE after the 'd' are known to be\n            // plentiful.  So, check the first 5 bytes for 'solid'.\n\n            // Several encodings, such as UTF-8, precede the text with up to 5 bytes:\n            // https://en.wikipedia.org/wiki/Byte_order_mark#Byte_order_marks_by_encoding\n            // Search for \"solid\" to start anywhere after those prefixes.\n\n            // US-ASCII ordinal values for 's', 'o', 'l', 'i', 'd'\n\n            var solid = [115, 111, 108, 105, 100];\n\n            for (var off = 0; off < 5; off++) {\n\n                // If \"solid\" text is matched to the current offset, declare it to be an ASCII STL.\n\n                if (matchDataViewAt(solid, reader, off)) return false;\n\n            }\n\n            // Couldn't find \"solid\" text at the beginning; it is binary STL.\n\n            return true;\n\n        }\n\n        function matchDataViewAt(query, reader, offset) {\n\n            // Check if each byte in query matches the corresponding byte from the current offset\n\n            for (var i = 0, il = query.length; i < il; i++) {\n\n                if (query[i] !== reader.getUint8(offset + i, false)) return false;\n\n            }\n\n            return true;\n\n        }\n\n        function parseBinary(data) {\n\n            var reader = new DataView(data);\n            var faces = reader.getUint32(80, true);\n\n            var r, g, b, hasColors = false, colors;\n            var defaultR, defaultG, defaultB, alpha;\n\n            // process STL header\n            // check for default color in header (\"COLOR=rgba\" sequence).\n\n            for (var index = 0; index < 80 - 10; index++) {\n\n                if ((reader.getUint32(index, false) == 0x434F4C4F /*COLO*/) &&\n                    (reader.getUint8(index + 4) == 0x52 /*'R'*/) &&\n                    (reader.getUint8(index + 5) == 0x3D /*'='*/)) {\n\n                    hasColors = true;\n                    colors = new Float32Array(faces * 3 * 3);\n\n                    defaultR = reader.getUint8(index + 6) / 255;\n                    defaultG = reader.getUint8(index + 7) / 255;\n                    defaultB = reader.getUint8(index + 8) / 255;\n                    alpha = reader.getUint8(index + 9) / 255;\n\n                }\n\n            }\n\n            var dataOffset = 84;\n            var faceLength = 12 * 4 + 2;\n\n            var geometry = new BufferGeometry();\n\n            var vertices = new Float32Array(faces * 3 * 3);\n            var normals = new Float32Array(faces * 3 * 3);\n\n            for (var face = 0; face < faces; face++) {\n\n                var start = dataOffset + face * faceLength;\n                var normalX = reader.getFloat32(start, true);\n                var normalY = reader.getFloat32(start + 4, true);\n                var normalZ = reader.getFloat32(start + 8, true);\n\n                if (hasColors) {\n\n                    var packedColor = reader.getUint16(start + 48, true);\n\n                    if ((packedColor & 0x8000) === 0) {\n\n                        // facet has its own unique color\n\n                        r = (packedColor & 0x1F) / 31;\n                        g = ((packedColor >> 5) & 0x1F) / 31;\n                        b = ((packedColor >> 10) & 0x1F) / 31;\n\n                    } else {\n\n                        r = defaultR;\n                        g = defaultG;\n                        b = defaultB;\n\n                    }\n\n                }\n\n                for (var i = 1; i <= 3; i++) {\n\n                    var vertexstart = start + i * 12;\n                    var componentIdx = (face * 3 * 3) + ((i - 1) * 3);\n\n                    vertices[componentIdx] = reader.getFloat32(vertexstart, true);\n                    vertices[componentIdx + 1] = reader.getFloat32(vertexstart + 4, true);\n                    vertices[componentIdx + 2] = reader.getFloat32(vertexstart + 8, true);\n\n                    normals[componentIdx] = normalX;\n                    normals[componentIdx + 1] = normalY;\n                    normals[componentIdx + 2] = normalZ;\n\n                    if (hasColors) {\n\n                        colors[componentIdx] = r;\n                        colors[componentIdx + 1] = g;\n                        colors[componentIdx + 2] = b;\n\n                    }\n\n                }\n\n            }\n\n            geometry.setAttribute('position', new BufferAttribute(vertices, 3));\n            geometry.setAttribute('normal', new BufferAttribute(normals, 3));\n\n            if (hasColors) {\n\n                geometry.setAttribute('color', new BufferAttribute(colors, 3));\n                geometry.hasColors = true;\n                geometry.alpha = alpha;\n\n            }\n\n            return geometry;\n\n        }\n\n        function parseASCII(data) {\n\n            var geometry = new BufferGeometry();\n            var patternSolid = /solid([\\s\\S]*?)endsolid/g;\n            var patternFace = /facet([\\s\\S]*?)endfacet/g;\n            var faceCounter = 0;\n\n            var patternFloat = /[\\s]+([+-]?(?:\\d*)(?:\\.\\d*)?(?:[eE][+-]?\\d+)?)/.source;\n            var patternVertex = new RegExp('vertex' + patternFloat + patternFloat + patternFloat, 'g');\n            var patternNormal = new RegExp('normal' + patternFloat + patternFloat + patternFloat, 'g');\n\n            var vertices = [];\n            var normals = [];\n\n            var normal = new Vector3();\n\n            var result;\n\n            var groupVertexes = [];\n            var groupCount = 0;\n            var startVertex = 0;\n            var endVertex = 0;\n\n            while ((result = patternSolid.exec(data)) !== null) {\n\n                startVertex = endVertex;\n\n                var solid = result[0];\n\n                while ((result = patternFace.exec(solid)) !== null) {\n\n                    var vertexCountPerFace = 0;\n                    var normalCountPerFace = 0;\n\n                    var text = result[0];\n\n                    while ((result = patternNormal.exec(text)) !== null) {\n\n                        normal.x = parseFloat(result[1]);\n                        normal.y = parseFloat(result[2]);\n                        normal.z = parseFloat(result[3]);\n                        normalCountPerFace++;\n\n                    }\n\n                    while ((result = patternVertex.exec(text)) !== null) {\n\n                        vertices.push(parseFloat(result[1]), parseFloat(result[2]), parseFloat(result[3]));\n                        normals.push(normal.x, normal.y, normal.z);\n                        vertexCountPerFace++;\n                        endVertex++;\n\n                    }\n\n                    // every face have to own ONE valid normal\n\n                    if (normalCountPerFace !== 1) {\n\n                        console.error('THREE.STLLoader: Something isn\\'t right with the normal of face number ' + faceCounter);\n\n                    }\n\n                    // each face have to own THREE valid vertices\n\n                    if (vertexCountPerFace !== 3) {\n\n                        console.error('THREE.STLLoader: Something isn\\'t right with the vertices of face number ' + faceCounter);\n\n                    }\n\n                    faceCounter++;\n\n                }\n\n                groupVertexes.push({ startVertex: startVertex, endVertex: endVertex });\n                groupCount++;\n\n            }\n\n            geometry.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n            geometry.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n\n            if (groupCount > 0) {\n\n                for (var i = 0; i < groupVertexes.length; i++) {\n\n                    geometry.addGroup(groupVertexes[i].startVertex, groupVertexes[i].endVertex, i);\n\n                }\n\n            }\n\n            return geometry;\n\n        }\n\n        function ensureString(buffer) {\n\n            if (typeof buffer !== 'string') {\n\n                return LoaderUtils.decodeText(new Uint8Array(buffer));\n\n            }\n\n            return buffer;\n\n        }\n\n        function ensureBinary(buffer) {\n\n            if (typeof buffer === 'string') {\n\n                var array_buffer = new Uint8Array(buffer.length);\n                for (var i = 0; i < buffer.length; i++) {\n\n                    array_buffer[i] = buffer.charCodeAt(i) & 0xff; // implicitly assumes little-endian\n\n                }\n\n                return array_buffer.buffer || array_buffer;\n\n            } else {\n\n                return buffer;\n\n            }\n\n        }\n\n        // start\n\n        var binData = ensureBinary(data);\n\n        return isBinary(binData) ? parseBinary(binData) : parseASCII(ensureString(data));\n\n    }\n\n});\n\nexport { STLLoader };\n"]}]}